#+TITLE: AI Typescript TicTacToe

Train a neural network to play TicTacToe

* Installation

With pnpm:

#+BEGIN_SRC shell
pnpm install
#+END_SRC

Validate the installation by running the test suite:

#+BEGIN_SRC shell
pnpm test
#+END_SRC

* Usage

** Training

From an interactive ts-node session:

#+BEGIN_SRC typescript
import * as NN from "./src/player/neuralNetwork";
import { execute, training } from "./src/player/neuralNetwork/training";

execute(training(NN.mkModel({ boardDimension: 3 }), { numGames: 100 }))

// > [SUCCESS] Execution success: {
//   total: { runs: 100, xs: 83, os: 13, ties: 4 },
//   totalRatio: { xs: 0.83, os: 0.13, ties: 0.04 }
// }
#+END_SRC

** Persistence

Models can be stored after training to be retrieved from a future session:

#+BEGIN_SRC typescript
import * as NN from "./src/player/neuralNetwork";
import { execute, training } from "./src/player/neuralNetwork/training";

execute(training(NN.mkModel({ boardDimension: 3 }), { numGames: 10000 })).then(v => NN.persist(v.model, "file://models/nn-3-10000"))
#+END_SRC

A model can be retrieved by referencing the corresponding `model.json` file:

#+BEGIN_SRC typescript
NN.load("file://models/nn-3-10000/model.json").then(model => console.log(model))
#+END_SRC

** Running

The Stats module provides utility functions to execute multiple games with different configurations:

#+BEGIN_SRC typescript
import * as Stats from "./src/stats";
import * as NN from "./src/player/neuralNetwork";
import * as RandomP from "./src/player/random";

NN.load("file://models/nn-3-10000/model.json").then(model => {
  console.log(Stats.runMany(1000, { p1: NN.move(model), p2: RandomP.move }))
})
#+END_SRC

** Playing (WIP)

A human player can also be configured:

#+BEGIN_SRC typescript
import * as GameM from "./src/game";
import * as BoardM from "./src/board";
import * as NN from "./src/player/neuralNetwork";
import * as HumanP from "./src/player/human";

NN.load("file://models/nn-3-10000/model.json").then(model => {
  GameM.run(BoardM.mkEmpty(), 1, { p1: NN.move(model), p2: HumanP.move })
})
#+END_SRC

* References

- [[https://medium.com/@carsten.friedrich/part-4-neural-network-q-learning-a-tic-tac-toe-player-that-learns-kind-of-2090ca4798d][Carsten Friedrich - Neural Network Q Learning, a Tic Tac Toe player that learns]]
- [[https://towardsdatascience.com/build-a-simple-neural-network-with-tensorflow-js-d434a30fcb8][Venelin Valkov - Build a simple Neural Network with TensorFlow.js]]
